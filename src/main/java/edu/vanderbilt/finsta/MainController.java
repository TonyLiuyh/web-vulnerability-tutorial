package edu.vanderbilt.finsta;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

@RestController("/")
public class MainController {
    private final SimpleDateFormat dateFormat;
    private final Connection conn;

    public MainController() throws SQLException {
        DriverManager.registerDriver(new com.mysql.cj.jdbc.Driver());
        dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/project", "username", "password");
    }

    @RequestMapping("/**/{path:[^\\.]*}")
    public String redirect() {
        return "forward:/";
    }


    @GetMapping(value = "/")
    public ModelAndView introduction() {
        return new ModelAndView("introduction");
    }

    @GetMapping(value = "/injection")
    public ModelAndView injection(@RequestParam(required = false, defaultValue = "Example") String username,
                                  @RequestParam(required = false, defaultValue = "Example") String password) {
        ModelAndView mv = new ModelAndView("injection");

        String sql = "SELECT * FROM User user WHERE user.username = '" + username + "' " +
                     "AND user.password = '" + password + "';";
        ArrayList<TestUser> userList = new ArrayList<>();
        try {
            ResultSet resultSet = conn.prepareStatement(sql).executeQuery();
            while (resultSet.next()) {
                userList.add(new TestUser(resultSet.getInt("id"),
                        resultSet.getString("username"),
                        resultSet.getString("password")));
            }
        } catch (SQLException ignored) {

        }

        mv.addObject("username", username);
        mv.addObject("password", password);
        mv.addObject("username_color", giveColor(username));
        mv.addObject("password_color", giveColor(password));
        mv.addObject("success", userList.isEmpty() ? "false" : "true");
        mv.addObject("userlist", userList);
        return mv;
    }

    private static String giveColor(String str) {
        str = str.replaceAll("=", "<span style=\"color: black\">=</span>");
        str = str.replaceAll(";", "<span style=\"color: black;\">;</span>");
        str = str.replaceAll("(?i) SELECT", "<span style=\"color: green;\"> SELECT</span>");
        str = str.replaceAll("(?i) FROM", "<span style=\"color: green;\"> FROM</span>");
        str = str.replaceAll("(?i) WHERE", "<span style=\"color: green;\"> WHERE</span>");
        str = str.replaceAll("(?i) OR", "<span style=\"color: green;\"> OR</span>");
        str = str.replaceAll("(?i) TABLE", "<span style=\"color: green;\"> TABLE</span>");
        str = str.replaceAll("(?i) DROP", "<span style=\"color: green;\"> DROP</span>");
        return str;
    }

    @GetMapping(value = "/xss")
    public ModelAndView xssInjection(@RequestParam(required = false, defaultValue = "Normal User") String username,
                                     @RequestParam(required = false, defaultValue = "Normal Content") String content) {
        ModelAndView mv = new ModelAndView("xss");
        mv.addObject("username", username);
        mv.addObject("content", content);
        mv.addObject("time", dateFormat.format(new Date()));
        return mv;
    }

    @GetMapping(value = "/deserialization")
    public ModelAndView insecureDeserialization() {
        ModelAndView mv = new ModelAndView("deserialization");
        return mv;
    }

    @GetMapping(value = "/authentication")
    public ModelAndView authentication() {
        ModelAndView mv = new ModelAndView("authentication");
        return mv;
    }

    @GetMapping(value = "/security")
    public ModelAndView security() {
        ModelAndView mv = new ModelAndView("security");
        return mv;
    }

    @GetMapping(value = "/access")
    public ModelAndView access() {
        ModelAndView mv = new ModelAndView("access");
        return mv;
    }

    @GetMapping(value = "/dependencies")
    public ModelAndView dependencies() {
        ModelAndView mv = new ModelAndView("dependencies");
        return mv;
    }

    @GetMapping(value = "/exposure")
    public ModelAndView exposure() {
        ModelAndView mv = new ModelAndView("exposure");
        return mv;
    }

    @GetMapping(value = "/xxe")
    public ModelAndView xxe() {
        ModelAndView mv = new ModelAndView("xxe");
        return mv;
    }
}
